#!/usr/bin/env python

import git_subtree as gs
from tabulate import tabulate

class STMShell(object):
    def __init__(self, manager):
        self.manager = manager

    def subtree_output(self, output):
        return "\n".join("{k}: {v}".format(k=k, v=v) for k, v in output.items())

    def list(self):
        columns = ['name', 'prefix', 'remote_url', 'branch']
        rows = []
        for name, tree in self.manager.list():
            rows.append([name, tree.prefix, tree.remote_url, tree.branch])

        out = tabulate(rows, headers=columns)
        print(out)

    def status(self):
        rows = []
        columns = ['name', 'has_remote', 'checked_out']
        for name, tree in self.manager.list():
            rows.append([name, tree.check_remote(), tree.has_tree()])

        out = tabulate(rows, headers=columns)
        print(out)

    def checkout(self):
        output = self.manager.checkout()
        print(self.subtree_output(output))

    def pull(self):
        # the git subtree pull output doesn't get returned
        output = self.manager.pull()

    def push(self):
        # the git subtree push output doesn't get returned
        output = self.manager.push()

    def add_remote(self):
        output = self.manager.add_remote()
        print(self.subtree_output(output))

if __name__ == '__main__':
    import argparse
    import os
    parser = argparse.ArgumentParser(description="Git Subtree Management");

    choices = ['list', 'checkout', 'pull', 'push', 'status', 'add_remote']
    parser.add_argument('action', nargs="?", action="store", default=None, choices=choices)

    args = parser.parse_args()

    action = args.action
    cwd = os.getcwd()

    if not action:
        action = 'list'

    treelist = gs.find_treelist(cwd)
    stm = gs.SubTreeManager(None, treelist)
    shell = STMShell(stm)

    method = getattr(shell, action)
    if method:
        method()
